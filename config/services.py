from pprint import pprint

from sqlalchemy.orm.exc import UnmappedInstanceError


from applications.account.views import LoginView, UserView
from applications.product.views import CategoryView, ProductView

user_login_obj = LoginView()
user_obj_ = UserView()
category_obj_ = CategoryView()
product_obj_ = ProductView()


class Account:
    @staticmethod
    def get_user() -> dict:
        while True:
            try:
                data = {
                    'data': {
                        'email': input('–í–≤–µ–¥–∏ —Å–≤–æ–π email: ').lower(),
                        'password': input('–í–≤–µ–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å: ').lower()
                    }
                }
                user = user_login_obj.get(data)
                print('\n–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è ü•≥\n')
                return user
            except Exception as ex_:
                print(f'\n{ex_}\n')

    @staticmethod
    def register() -> dict:
        while True:
            try:
                data = {
                    'data': {
                        'email': input('–í–≤–µ–¥–∏ email: ').lower(),
                        'password': input('–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å: ').lower(),
                        'password2': input('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å: ').lower()
                    }
                }
                user = user_obj_.create(data)
                print('\n–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è ü•≥\n')
                return user
            except Exception as ex_:
                print(f'\n{ex_}\n')


class Category:
    @staticmethod
    def get_or_create_category():
        while True:
            try:
                category_list = category_obj_.list()
                print('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∑–∞–ø–æ–º–Ω–∏—Ç–µ –∏—Ö –Ω–æ–º–µ—Ä–∞):')
                for dict_ in category_list:
                    print(f"{dict_['id']}: {dict_['title']}")
                choice = input('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é? (–î–∞/–ù–µ—Ç): ').lower()
                if choice not in ['yes', 'no', '–¥–∞', '–Ω–µ—Ç']:
                    raise AttributeError()
                if choice in ['–¥–∞', 'yes']:
                    category_obj_.create({
                        'data': {'title': input('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ').lower()}
                    })
                    for dict_ in category_list:
                        print(f"{dict_['id']}: {dict_['title']}")
                    print('\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ü•≥\n')
                elif choice in ['–Ω–µ—Ç', 'no']:
                    return
            except AttributeError:
                print('\n!!!!!!!!!!!!!–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n')
            except Exception as ex_:
                print(f'\n{ex_}\n')


class Product:
    @staticmethod
    def get():
        while True:
            try:
                request = {
                    'id': int(input('id –ø—Ä–æ–¥—É–∫—Ç–∞: '))
                }
                data = product_obj_.get(request)
                return data
            except ValueError:
                print('\n!!!!!!!!!!!!!–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏–ª–æ\n')
            except IndexError:
                print('\n!!!!!!!!!!!!!–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n')
                break
            except Exception as ex_:
                print(f'\n{ex_}\n')

    @staticmethod
    def post(user):
        while True:
            try:
                request = {
                    'data': {
                        'title': input('–ù–∞–∑–≤–∞–Ω–∏–µ: ').lower(),
                        'price': int(input('–¶–µ–Ω–∞: ')),
                        'category_id': int(input('–ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')),
                        'user_id': user.get('id')
                    }
                }
                data = product_obj_.post(request)
                print('\n–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–≤–∞–ª–µ–Ω ü•≥\n')
                return data
            except ValueError:
                print('\n!!!!!!!!!!!!!–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏–ª–æ\n')
            except Exception as ex_:
                print(f'\n{ex_}\n')

    @staticmethod
    def list():
        return product_obj_.list()

    @staticmethod
    def update(user):
        while True:
            try:
                request = {
                    'id': int(input('id –ø—Ä–æ–¥—É–∫—Ç–∞: ')),
                    'data': {
                        'title': input('–ù–∞–∑–≤–∞–Ω–∏–µ: ').lower(),
                        'price': int(input('–¶–µ–Ω–∞: ')),
                        'category_id': int(input('–ù–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ')),
                        'user_id': user.get('id')
                    }
                }
                data = product_obj_.update(request)
                print('\n–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω ü•≥\n')
                return data
            except ValueError:
                print('\n!!!!!!!!!!!!!–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏–ª–æ\n')
            except AttributeError:
                print('\n!!!!!!!!!!!!–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º id\n')
                break
            except Exception as ex_:
                print(f'\n{ex_}\n')

    @staticmethod
    def delete(user):
        while True:
            try:
                request = {
                    'id': int(input('id –ø—Ä–æ–¥—É–∫—Ç–∞: ')),
                    'user_id': user.get('id')
                }
                product_obj_.delete(request)
                print('\n–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω ü•≥\n')
                return
            except ValueError:
                print('\n!!!!!!!!!!!!!–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏–ª–æ\n')
            except IndexError:
                print('\n!!!!!!!!!!!!!–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞\n')
            except UnmappedInstanceError:
                print('\n!!!!!!!!!!!!–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º id\n')
            except AttributeError:
                print('\n!!!!!!!!!!!!–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —Ç–∞–∫–∏–º id\n')
                break
            except Exception as ex_:
                print(f'\n{ex_}\n')
                break


product_obj = Product()
category_obj = Category()


def product_cycle(user):
    print('–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏')
    while True:
        try:
            # –ø—Ä–æ–¥—É–∫—Ç—ã

            choice = int(input(
                "1: —Å–æ–∑–¥–∞—Ç—å\n"
                "2: –∏–∑–º–µ–Ω–∏—Ç—å\n"
                "3: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
                "4: –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç\n"
                "5: —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
                "6: –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
                "7: –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é\n"
                "–¢–≤–æ–π –≤—ã–±–æ—Ä: "
            ))
            if choice not in range(1, 8):
                raise AttributeError()
            match choice:
                case 1:
                    pprint(product_obj.post(user=user))
                case 2:
                    product = product_obj.update(user=user)
                    if product:
                        print(product)
                case 3:
                    pprint(product_obj.list())
                case 4:
                    product = product_obj.get()
                    if product:
                        pprint(product)
                case 5:
                    product_obj.delete(user=user)
                case 6:
                    category_obj.get_or_create_category()
                case 7:
                    break

        except ValueError:
            print('\n!!!!!!!!!!!!!–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —á–∏–ª–æ\n')
        except AttributeError:
            print('\n!!!!!!!!!!!!!–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞\n')
